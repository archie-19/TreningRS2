// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eTraining.Model.Context;

namespace TreningRS2.Database.Migrations
{
    [DbContext(typeof(TrainingContext))]
    partial class TrainingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eTraining.Database.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DatumRegistracije")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpcinaId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Spol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OpcinaId");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("eTraining.Database.Entities.ApplicationUserRole", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRole");
                });

            modelBuilder.Entity("eTraining.Database.Entities.Clanarina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumIsteka")
                        .HasColumnType("datetime2");

                    b.Property<int>("PolaznikId")
                        .HasColumnType("int");

                    b.Property<int>("UplataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolaznikId");

                    b.HasIndex("UplataId");

                    b.ToTable("Clanarina");
                });

            modelBuilder.Entity("eTraining.Database.Entities.Opcina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opcina");
                });

            modelBuilder.Entity("eTraining.Database.Entities.Polaznik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Polaznik");
                });

            modelBuilder.Entity("eTraining.Database.Entities.PolaznikTreningInstanca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<bool?>("Polozen")
                        .HasColumnType("bit");

                    b.Property<int?>("Rejting")
                        .HasColumnType("int");

                    b.Property<int>("TreningInstancaId")
                        .HasColumnType("int");

                    b.Property<bool?>("UplataIzvrsena")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KlijentId");

                    b.HasIndex("TreningInstancaId");

                    b.ToTable("PolaznikTreningInstanca");
                });

            modelBuilder.Entity("eTraining.Database.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("eTraining.Database.Entities.Termin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumVrijemeOdrzavanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lokacija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Odrzan")
                        .HasColumnType("bit");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreningInstancaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TreningInstancaId");

                    b.ToTable("Termin");
                });

            modelBuilder.Entity("eTraining.Database.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumVrijemeIspita")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lokacija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreningInstancaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TreningInstancaId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("eTraining.Database.Entities.TestPolaznikTreningInstanca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Bodovi")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("KlijentKursInstancaId")
                        .HasColumnType("int");

                    b.Property<bool>("Prisustvovao")
                        .HasColumnType("bit");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KlijentKursInstancaId");

                    b.HasIndex("TestId");

                    b.ToTable("TestPolaznikTreningInstanca");
                });

            modelBuilder.Entity("eTraining.Database.Entities.TipUplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipUplate");
                });

            modelBuilder.Entity("eTraining.Database.Entities.Trening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkraceniNaziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trening");
                });

            modelBuilder.Entity("eTraining.Database.Entities.TreningInstanca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojCasova")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<DateTime?>("KrajDatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PocetakDatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PrijaveDoDatum")
                        .HasColumnType("datetime2");

                    b.Property<int>("TreningId")
                        .HasColumnType("int");

                    b.Property<int>("UposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TreningId");

                    b.HasIndex("UposlenikId");

                    b.ToTable("TreningInstanca");
                });

            modelBuilder.Entity("eTraining.Database.Entities.Uplata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumUplate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Iznos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PolaznikId")
                        .HasColumnType("int");

                    b.Property<int>("TipUplateId")
                        .HasColumnType("int");

                    b.Property<int?>("TreningInstancaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolaznikId");

                    b.HasIndex("TipUplateId");

                    b.HasIndex("TreningInstancaId");

                    b.ToTable("Uplata");
                });

            modelBuilder.Entity("eTraining.Database.Entities.Uposlenik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumZaposlenja")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Uposlenik");
                });

            modelBuilder.Entity("eTraining.Database.Entities.ApplicationUser", b =>
                {
                    b.HasOne("eTraining.Database.Entities.Opcina", "Opcina")
                        .WithMany()
                        .HasForeignKey("OpcinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eTraining.Database.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("eTraining.Database.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTraining.Database.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eTraining.Database.Entities.Clanarina", b =>
                {
                    b.HasOne("eTraining.Database.Entities.Polaznik", "Polaznik")
                        .WithMany("ClanarinePolaznika")
                        .HasForeignKey("PolaznikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTraining.Database.Entities.Uplata", "Uplata")
                        .WithMany()
                        .HasForeignKey("UplataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eTraining.Database.Entities.Polaznik", b =>
                {
                    b.HasOne("eTraining.Database.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eTraining.Database.Entities.PolaznikTreningInstanca", b =>
                {
                    b.HasOne("eTraining.Database.Entities.Polaznik", "Klijent")
                        .WithMany("TreninziPolaznika")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTraining.Database.Entities.TreningInstanca", "TreningInstanca")
                        .WithMany("PolazniciNaTreningu")
                        .HasForeignKey("TreningInstancaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eTraining.Database.Entities.Termin", b =>
                {
                    b.HasOne("eTraining.Database.Entities.TreningInstanca", "TreningInstanca")
                        .WithMany("Termini")
                        .HasForeignKey("TreningInstancaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eTraining.Database.Entities.Test", b =>
                {
                    b.HasOne("eTraining.Database.Entities.TreningInstanca", "TreningInstanca")
                        .WithMany()
                        .HasForeignKey("TreningInstancaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eTraining.Database.Entities.TestPolaznikTreningInstanca", b =>
                {
                    b.HasOne("eTraining.Database.Entities.PolaznikTreningInstanca", "PolaznikTreningInstanca")
                        .WithMany()
                        .HasForeignKey("KlijentKursInstancaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTraining.Database.Entities.Test", "Test")
                        .WithMany("PolazniciNaTestu")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eTraining.Database.Entities.TreningInstanca", b =>
                {
                    b.HasOne("eTraining.Database.Entities.Trening", "Trening")
                        .WithMany()
                        .HasForeignKey("TreningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTraining.Database.Entities.Uposlenik", "Uposlenik")
                        .WithMany("TreninziUposlenika")
                        .HasForeignKey("UposlenikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eTraining.Database.Entities.Uplata", b =>
                {
                    b.HasOne("eTraining.Database.Entities.Polaznik", "Polaznik")
                        .WithMany("UplatePolaznika")
                        .HasForeignKey("PolaznikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTraining.Database.Entities.TipUplate", "TipUplate")
                        .WithMany()
                        .HasForeignKey("TipUplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTraining.Database.Entities.TreningInstanca", "TreningInstanca")
                        .WithMany()
                        .HasForeignKey("TreningInstancaId");
                });

            modelBuilder.Entity("eTraining.Database.Entities.Uposlenik", b =>
                {
                    b.HasOne("eTraining.Database.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
